# -*- coding: utf-8 -*-
"""Proyecto_talento_tech.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1xIWOddIXJk3NHFJ0MgitI1C5cGemBflA
"""

# Commented out IPython magic to ensure Python compatibility.
# %pip install rasterio fiona
!pip install earthpy

import os
import rasterio
import rasterio.plot
import matplotlib.pyplot as plt
import geopandas as gpd
import earthpy as et
import numpy as np
import requests
from matplotlib import pyplot

url_wind = "https://raw.githubusercontent.com/JulianaTQ/Project_Data_Analyst/main/Wind_Average.tif"
url_solar = "https://raw.githubusercontent.com/JulianaTQ/Project_Data_Analyst/main/Solar_radiation_average.tif"
url_Depart =  "https://raw.githubusercontent.com/JulianaTQ/Project_Data_Analyst/main/Departamentos.zip"

response1 = requests.get(url_wind, stream=True)
if response1.status_code == 200:
    with open("Wind_Average.tif", "wb") as f:
        for chunk in response1.iter_content(chunk_size=8192):
            f.write(chunk)
else:
    print("Error al descargar el archivo")

response2 = requests.get(url_solar, stream=True)
if response2.status_code == 200:
    with open("Solar_radiation_average.tif", "wb") as f:
        for chunk in response2.iter_content(chunk_size=8192):
            f.write(chunk)
else:
    print("Error al descargar el archivo")

src1 = rasterio.open("Wind_Average.tif")

# Mostrar el mapa de promedio de vientos
fig, ax = plt.subplots(figsize=(10, 6))
rasterio.plot.show(src1, ax=ax)
plt.show()

src2 = rasterio.open("Solar_radiation_average.tif")

# Mostrar el mapa de promedio de radiación solar
fig, ax = plt.subplots(figsize=(10, 6))
rasterio.plot.show(src2, ax=ax)
plt.show()

#Carga del archivo shape para unificar los mapas
import zipfile

# Nombre del archivo ZIP temporal
zip_path = "Departamentos.zip"

response = requests.get(url_Depart, stream=True)
if response.status_code == 200:
    with open(zip_path, "wb") as f:
        for chunk in response.iter_content(chunk_size=8192):
            f.write(chunk)
    print("Archivo ZIP descargado correctamente.")
else:
    print("Error al descargar el archivo.")
    exit()

# Extraer el ZIP
extract_folder = "Departamentos_shp"
with zipfile.ZipFile(zip_path, "r") as zip_ref:
    zip_ref.extractall(extract_folder)
    print("Archivo ZIP extraído correctamente.")

shp_files = [f for f in os.listdir(extract_folder) if f.endswith(".shp")]
if not shp_files:
    print("No se encontró ningún archivo .shp en la carpeta extraída.")
    exit()

shp_file_path = os.path.join(extract_folder, shp_files[0])
gdf = gpd.read_file(shp_file_path)

print(gdf.head())

gdf.plot()

#Unificar la visualización del shape por departamentos y los raster
fig, axes = plt.subplots(1, 2, figsize=(12, 6), constrained_layout=True)

im1 = rasterio.plot.show(src1, ax=axes[0], cmap="viridis")
gdf.plot(ax=axes[0], facecolor="none", edgecolor="black", linewidth=0.7)

im2 = rasterio.plot.show(src2, ax=axes[1], cmap="inferno")
gdf.plot(ax=axes[1], facecolor="none", edgecolor="black", linewidth=0.7)

cbar_ax1 = fig.add_axes([0.12, 0.94, 0.25, 0.02])
cbar_ax2 = fig.add_axes([0.57, 0.94, 0.25, 0.02])

fig.colorbar(im1.images[0], cax=cbar_ax1, orientation="horizontal", label="Vientos (m/s)")
fig.colorbar(im2.images[0], cax=cbar_ax2, orientation="horizontal", label="Rad_solar (kJ/m2.dia)")

plt.show()

#Cargar el archivo de datos de consumo de energía y producción por municipios (viento y radiación) y departamentos (productos desecho de cultivos)
import seaborn as sns
import scipy as sp
import pandas as pd

df= pd.read_csv("/content/mi_archivo.csv")

# Gráfico de índices
plt.plot(df["DEPARTAMENTO"], df["Indice_Solar"], label='Solar', color='r', linewidth=2, marker='o', markersize= 4)
plt.plot(df["DEPARTAMENTO"], df["Indice_Eolico"], label='Eólico', color='b', linewidth=2, marker='o', markersize= 4)
plt.plot(df["DEPARTAMENTO"], df["Indice_Biomasa"], label='Biomasa', color='g', linewidth=2, marker='o', markersize= 4)

plt.xlabel('Departamentos')
plt.xticks(rotation=90)
plt.ylabel('Indice')
plt.title('ÍNDICE PRIORIZACIÓN TIPO ENERGÍA / DEPARTAMENTO')
plt.legend()

# Crear gráfico de columnas apiladas
fig, ax = plt.subplots()
ax.bar(df["DEPARTAMENTO"], df["Indice_Solar"], label='Solar', color= "r")
ax.bar(df["DEPARTAMENTO"], df["Indice_Eolico"], label='Eólica', color= "b")
ax.bar(df["DEPARTAMENTO"], df["Indice_Biomasa"], label='Biomasa', color= "g")

# Añadir etiquetas y título
ax.set_xlabel('Departamento')
plt.xticks(rotation=90)
ax.set_ylabel('Indice')
ax.set_title('Indice priorización tipo energía / departamento')
ax.legend()

# Estadística descriptiva
df.describe()

# Identificación de datos nulos
df.isnull().sum()

# Eliminación de datos atípicos
df_num = df.select_dtypes(include="number")
Q1 = df_num.quantile(0.25)
Q3 = df_num.quantile(0.75)
IQR = Q3 - Q1

limite_inferior = Q1 - 1.5 * IQR
limite_superior = Q3 + 1.5 * IQR

df_sin_atipicos = df[~((df_num < limite_inferior) | (df_num > limite_superior)).any(axis=1)]

df['tipo_cultivo'].value_counts().plot(kind='pie', autopct='%1.1f%%')
plt.title("Desechos (Ton) por tipo de cultivo")
plt.ylabel('')
plt.show()

# Objetivo: Observar la evolución de la producción de energía
production_by_year = df.groupby('DEPARTAMENTO')['Wind_promedio'].mean()
plt.figure(figsize=(8, 5))
plt.plot(production_by_year, marker='o', linestyle='-', color='green')
plt.title('Promedio viento por departamento')
plt.xlabel('Departamento')
plt.xticks(rotation=90)
plt.ylabel('Viento m/s')
plt.grid()
plt.show()

# Objetivo: Observar la evolución de la producción de energía
production_by_year = df.groupby('DEPARTAMENTO')['Solar_radiation_promedio'].mean()
plt.figure(figsize=(8, 5))
plt.plot(production_by_year, marker='o', linestyle='-', color='green')
plt.title('Promedio radiación solar por departamento')
plt.xlabel('Departamento')
plt.xticks(rotation=90)
plt.ylabel('Radiación hora/día')
plt.grid()
plt.show()

# Objetivo: Observar la evolución de la producción de energía
production_by_year = df.groupby('DEPARTAMENTO')['consumo_energia_promedio'].mean()
plt.figure(figsize=(8, 5))
plt.plot(production_by_year, marker='o', linestyle='-', color='green')
plt.title('Promedio consumo de energía')
plt.xlabel('Departamento')
plt.xticks(rotation=90)
plt.ylabel('consumo Kw')
plt.grid()
plt.show()

import folium

# Ejemplo de DataFrame (ajusta esto a tus datos)
df = pd.DataFrame({
    "Latitud": list(df["Latitud"]),
    "Longitud": list(df["Longitud"]),
    "LOCALIDAD": list(df["MUNICIPIO"]),
    "consumo_energia_promedio": list(df["consumo_energia_promedio"])
})

# Mapa base
mapa = folium.Map(location=[4.5709, -74.2973], zoom_start=5)  # Centro de Colombia
for idx, row in df.iterrows():
    folium.CircleMarker(
        location=[row["Latitud"], row["Longitud"]],
        radius=row["consumo_energia_promedio"] / 100000,  # Escalar el radio
        popup=row["LOCALIDAD"],
        fill=True,
        color="blue",
        fill_opacity=0.2
    ).add_to(mapa)

mapa

from sklearn.preprocessing import StandardScaler
from sklearn.cluster import KMeans

df_sin_atipico = df.select_dtypes(include="number")

# Estandarización de los datos
scaler = StandardScaler()
df_scaled = scaler.fit_transform(df_sin_atipico)

# Clustering por método del codo
inertia = []
K_range = range(1, 80)
for k in K_range:
    kmeans = KMeans(n_clusters=k, random_state=42, n_init=10)
    kmeans.fit(df_scaled)
    inertia.append(kmeans.inertia_)

# Grafica el método del codo
plt.figure(figsize=(8, 5))
plt.plot(K_range, inertia, marker="o")
plt.xlabel("Número de Clusters (k)")
plt.ylabel("Inercia")
plt.title("Método del Codo para determinar k")
plt.grid()
plt.show()